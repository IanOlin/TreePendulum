function doublePendulum()

g = 9.81;       % m.s^-2    Gravity constant
m = 1;          % kg        Mass of thing
l = 1;          % m         Length of rod
simTime = 20;   % s         Simulation Time

initialDataDegrees = [20; 30; 0; 0]; % [theta1; theta2; theta3; theta1'; theta2'; theta3';]
%initialData = initialDataDegrees.*pi/180;   % Put it into rads
initialData = [-.46; -1.2; 0; 0];

[T1, D1] = ode45(@updateAngles, [0,simTime], initialData);
%plot(T1, [D1(:,1) D1(:,2)])
plot(T1, D1(:,3))

X1 = l*sin(D1(:,1));
Y1 = l*-cos(D1(:,1))


function Res = updateAngles(t, Angles)
        % Unwrap like it's xmas
        theta1 = Angles(1);
        theta2 = Angles(2);
        theta1dot = Angles(3);
        theta2dot = Angles(4);
        
        % DiffyQs
        Res = [theta1dot; theta2dot; l.^(-1).*((-7)+cos(2.*(theta1+(-1).*theta2))).^(-1).*(7.*g.*cos( ...
  theta1)+(-1).*g.*cos(theta1+(-2).*theta2)+4.*l.*theta2dot.^2.*sin( ...
  theta1+(-1).*theta2)+l.*theta1dot.^2.*sin(2.*(theta1+(-1).*theta2) ...
  ));(-2).*l.^(-1).*((-7)+cos(2.*(theta1+(-1).*theta2))).^(-1).*(2.* ...
  l.*theta1dot.^2+l.*theta2dot.^2.*cos(theta1+(-1).*theta2)+(-2).* ...
  g.*sin(theta1)).*sin(theta1+(-1).*theta2)];
        
        
end


end
